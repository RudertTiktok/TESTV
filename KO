local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local Debris = game:GetService("Debris")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Stats = game:GetService("Stats")
local NetworkClient = game:GetService("NetworkClient")

if not game:IsLoaded() then
    game.Loaded:Wait()
end

local LocalPlayer = Players.LocalPlayer
local RunTime = Workspace.Runtime
local Alive = Workspace.Alive
local Dead = Workspace.Dead
local Settings = {
    AutoParryEnabled = true,
    CursorTargeting = true
}
local GrabParryAnimation = nil
local ParryKey = nil
local Remotes = {} -- Obfuscated remotes, unchanged
local Connections = {}
local Camera = Workspace.CurrentCamera
local ClosestEntity = nil
local ParryCount = 0
local LastInput = nil
local TargetSelectionMethod = "ClosestToCursor"
local IsBallRespawned = false
local LastParryTime = 0

local NothingLibrary = loadstring(game:HttpGetAsync('https://raw.githubusercontent.com/3345-c-a-t-s-u-s/NOTHING/main/source.lua'))()
local Interface = NothingLibrary.Interface
local Notify = NothingLibrary.Notification()

Notify.new({
    Title = "...VicoX Is Fetch...",
    Description = "welcome to Vico script i hope you like it ðŸ˜‹..",
    Duration = 6,
    Icon = "rbxassetid://8997385628"
})

local AutoParry = {
    Target = { Current = nil, From = nil, Aim = nil },
    Ball = {
        Properties = {
            AeroDynamicTime = tick(),
            LastPosition = Vector3.zero,
            Rotation = Vector3.zero,
            Distance = 0,
            Speed = 0,
            Velocity = Vector3.zero,
            Direction = Vector3.zero,
            Dot = 0,
            MaximumSpeed = 0,
            LastHit = 0,
            Parries = 0,
            SpamRange = 0,
            ParryRange = 0,
            AutoSpam = false,
            Cooldown = false,
            LastWarping = tick(),
            IsCurved = false,
            HellHookCompleted = true,
            LastCurvePosition = Vector3.zero,
            LerpRadians = 0,
            Radians = 0,
            OldSpeed = 0,
            Position = Vector3.zero,
            RespawnTime = 0
        },
        BallEntity = nil,
        ClientBallEntity = nil
    },
    EntityProperties = { Distance = 0, Velocity = Vector3.zero, Direction = Vector3.zero, ServerPosition = Vector3.zero, IsMoving = false, Speed = 0, Dot = 0 },
    SpamSensitivity = 50,
    PingBasedSpam = true,
    ParryType = "Default"
}

local Player = {
    Entity = {
        Properties = {
            Ping = 0,
            Sword = "",
            ServerPosition = Vector3.zero,
            Velocity = Vector3.zero,
            Speed = 0,
            IsMoving = false,
            GrabAnimation = nil
        }
    }
}

local Animation = {
    Storage = {},
    Track = nil,
    Current = nil
}

-- Obfuscated remotes initialization (unchanged)
task.spawn(function()
    for _, Value in getgc() do
        if type(Value) == 'function' and islclosure(Value) then
            local Protos = debug.getprotos(Value)
            local Upvalues = debug.getupvalues(Value)
            local Constants = debug.getconstants(Value)
            if #Protos == 4 and #Upvalues == 24 and #Constants >= 102 then
                local c62 = Constants[62]
                local c64 = Constants[64]
                local c65 = Constants[65]
                Remotes[debug.getupvalue(Value, 16)] = c62
                ParryKey = debug.getupvalue(Value, 17)
                Remotes[debug.getupvalue(Value, 18)] = c64
                Remotes[debug.getupvalue(Value, 19)] = c65
                break
            end
        end
    end
end)

-- Play parry animation based on equipped sword
function AutoParry.PlayParryAnimation()
    local CurrentSword = LocalPlayer.Character and LocalPlayer.Character:GetAttribute("CurrentlyEquippedSword")
    if not CurrentSword then
        return
    end
    local SwordData = ReplicatedStorage.Shared.ReplicatedInstances.Swords.GetSword:Invoke(CurrentSword)
    if not SwordData or not SwordData['AnimationType'] then
        return
    end
    local ParryAnimation = ReplicatedStorage.Shared.SwordAPI.Collection.Default:FindFirstChild("GrabParry")
    for _, object in pairs(ReplicatedStorage.Shared.SwordAPI.Collection:GetChildren()) do
        if object.Name == SwordData['AnimationType'] then
            local swordAnimationType = (object:FindFirstChild("GrabParry") and "GrabParry") or "Grab"
            ParryAnimation = object[swordAnimationType]
        end
    end
    if LocalPlayer.Character and LocalPlayer.Character.Humanoid and ParryAnimation then
        GrabParryAnimation = LocalPlayer.Character.Humanoid.Animator:LoadAnimation(ParryAnimation)
        GrabParryAnimation:Play()
    end
end

-- Play a specific animation
function AutoParry.PlayAnimation(animationName)
    local Animations = Animation.Storage[animationName]
    if not Animations then
        return false
    end
    local Animator = LocalPlayer.Character and LocalPlayer.Character.Humanoid and LocalPlayer.Character.Humanoid.Animator
    if not Animator then
        return false
    end
    if Animation.Track and Animation.Track:IsA("AnimationTrack") then
        Animation.Track:Stop()
    end
    Animation.Track = Animator:LoadAnimation(Animations)
    if Animation.Track and Animation.Track:IsA("AnimationTrack") then
        Animation.Track:Play()
    end
    Animation.Current = animationName
end

-- Get the real ball entity
function AutoParry.GetBall()
    for _, instance in pairs(Workspace.Balls:GetChildren()) do
        if instance:GetAttribute("realBall") then
            instance.CanCollide = false
            return instance
        end
    end
end

-- Get client-side ball entity
function AutoParry.GetClientBall()
    return AutoParry.GetBall()
end

-- Reset AutoParry state
function AutoParry.Reset()
    local BallProperties = AutoParry.Ball.Properties
    BallProperties.IsCurved = false
    BallProperties.AutoSpam = false
    BallProperties.Cooldown = false
    BallProperties.MaximumSpeed = 0
    BallProperties.Parries = 0
    BallProperties.LastHit = 0
    ParryCount = 0
    LastParryTime = 0
    AutoParry.Target.Current = nil
    AutoParry.Target.From = nil
    AutoParry.Target.Aim = nil
end

-- Generate parry data for remote calls
function AutoParry.GenerateParryData()
    if not Camera then return {0, CFrame.new(), {}, {0, 0}} end
    local ViewportSize = Camera.ViewportSize
    local MouseLocation = (LastInput == Enum.UserInputType.MouseButton1 or LastInput == Enum.UserInputType.MouseButton2 or LastInput == Enum.UserInputType.Keyboard)
        and UserInputService:GetMouseLocation()
        or Vector2.new(ViewportSize.X / 2, ViewportSize.Y / 2)
    local Used = {MouseLocation.X + math.random(-5, 5), MouseLocation.Y + math.random(-5, 5)}
    if TargetSelectionMethod == "ClosestToCursor" then
        ClosestEntity = Player.GetClosestPlayerToCursor()
        if ClosestEntity and ClosestEntity.PrimaryPart then
            Used = Camera:WorldToScreenPoint(ClosestEntity.PrimaryPart.Position)
        end
    end
    local AlivePlayers = Workspace.Alive:GetChildren()
    local Events = table.create(#AlivePlayers)
    for _, v in ipairs(AlivePlayers) do
        if v.PrimaryPart then
            Events[tostring(v)] = Camera:WorldToScreenPoint(v.PrimaryPart.Position)
        end
    end
    local pos = Camera.CFrame.Position
    local look = Camera.CFrame.LookVector
    local up = Camera.CFrame.UpVector
    local right = Camera.CFrame.RightVector
    local directions = {
        Backwards = pos - look * 1000,
        Random = Vector3.new(math.random(-3000, 3000), math.random(-3000, 3000), math.random(-3000, 3000)),
        Straight = pos + look * 1000,
        Up = pos + up * 1000,
        Right = pos + right * 1000,
        Left = pos - right * 1000
    }
    local lookTarget = directions[AutoParry.ParryType] or (pos + look * 1000)
    local DirectionCF = CFrame.new(pos, lookTarget)
    return {0, DirectionCF, Events, Used}
end

-- Obfuscated remote handling (unchanged)
local foundFake = false
for _, Args in pairs(Remotes) do
    if Args == "PARRY_HASH_FAKE_1" or Args == "_G" then
        foundFake = true
        break
    end
end

-- Perform a parry action
function AutoParry.PerformParry()
    if AutoParry.Ball.Properties.Cooldown or (tick() - LastParryTime) < 0.1 or not AutoParry.Ball.BallEntity then
        return
    end
    local ParryData = AutoParry.GenerateParryData()
    for Remote, Args in pairs(Remotes) do
        local Hash = foundFake and nil or Args
        Remote:FireServer(Hash, ParryKey, unpack(ParryData))
    end
    task.spawn(function()
        local dummyRemote = ReplicatedStorage:FindFirstChild("DummyRemote") or ReplicatedStorage:FindFirstChild("ParryButtonPress")
        if dummyRemote then
            dummyRemote:FireServer(math.random(1, 100), CFrame.new(math.random(-100, 100), math.random(-100, 100), math.random(-100, 100)))
        end
    end)
    if ParryCount > 7 then
        return false
    end
    ParryCount += 1
    AutoParry.Ball.Properties.Cooldown = true
    LastParryTime = tick()
    AutoParry.PlayParryAnimation()
    task.delay(0.3, function()
        if ParryCount > 0 then
            ParryCount -= 1
        end
    end)
end

-- Check if the ball trajectory is curved
function AutoParry.IsCurved()
    local Target = AutoParry.Target.Current
    if not Target then
        return false
    end
    local BallProperties = AutoParry.Ball.Properties
    local CurrentTarget = Target.Name
    if Target.PrimaryPart and Target.PrimaryPart:FindFirstChild('MaxShield') and CurrentTarget ~= LocalPlayer.Name and BallProperties.Distance < 50 then
        return false
    end
    if AutoParry.Ball.BallEntity and AutoParry.Ball.BallEntity:FindFirstChild('TimeHole1') and CurrentTarget ~= LocalPlayer.Name and BallProperties.Distance < 100 then
        BallProperties.AutoSpam = false
        return false
    end
    if AutoParry.Ball.BallEntity and AutoParry.Ball.BallEntity:FindFirstChild('WEMAZOOKIEGO') and CurrentTarget ~= LocalPlayer.Name and BallProperties.Distance < 100 then
        return false
    end
    if AutoParry.Ball.BallEntity and AutoParry.Ball.BallEntity:FindFirstChild('At2') and BallProperties.Speed <= 0 then
        return true
    end
    if AutoParry.Ball.BallEntity and AutoParry.Ball.BallEntity:FindFirstChild('AeroDynamicSlashVFX') then
        Debris:AddItem(AutoParry.Ball.BallEntity.AeroDynamicSlashVFX, 0)
        BallProperties.AutoSpam = false
        BallProperties.AeroDynamicTime = tick()
    end
    if RunTime:FindFirstChild('Tornado') then
        if BallProperties.Distance > 5 and (tick() - BallProperties.AeroDynamicTime) < (RunTime.Tornado:GetAttribute("TornadoTime") or 1) + 0.314159 then
            return true
        end
    end
    if not BallProperties.HellHookCompleted and Target.Name == LocalPlayer.Name and BallProperties.Distance > 5 - math.random() then
        return true
    end
    local ballDirection = BallProperties.Velocity.Magnitude > 0 and BallProperties.Velocity.Unit or Vector3.zero
    local ballSpeed = BallProperties.Speed
    local speedThreshold = math.min(ballSpeed / 100, 40)
    local angleThreshold = 40 * math.max(BallProperties.Dot, 0)
    local playerPing = Player.Entity.Properties.Ping
    local accurateDirection = ballDirection
    if BallProperties.Velocity.Magnitude > 0 then
        accurateDirection = accurateDirection * ballDirection
    end
    local directionDifference = BallProperties.Velocity.Magnitude > 0 and (accurateDirection - BallProperties.Velocity).Unit or Vector3.zero
    local accurateDot = BallProperties.Direction:Dot(directionDifference)
    local dotDifference = BallProperties.Dot - accurateDot
    local dotThreshold = 0.5 - playerPing / 1000
    local reachTime = BallProperties.MaximumSpeed > 0 and BallProperties.Distance / BallProperties.MaximumSpeed - (playerPing / 1000) or 0
    local enoughSpeed = BallProperties.MaximumSpeed > 100
    local ballDistanceThreshold = 15 - math.min(BallProperties.Distance / 1000, 15) + angleThreshold + speedThreshold
    if enoughSpeed and reachTime > playerPing / 10 then
        ballDistanceThreshold = math.max(ballDistanceThreshold - 15, 15)
    end
    if BallProperties.Distance < ballDistanceThreshold then
        return false
    end
    if dotDifference < dotThreshold then
        return true
    end
    if BallProperties.LerpRadians < 0.018 then
        BallProperties.LastCurvePosition = BallProperties.Position
        BallProperties.LastWarping = tick()
    end
    if (tick() - BallProperties.LastWarping) < (reachTime / 1.5) then
        return true
    end
    return BallProperties.Dot < dotThreshold
end

local OldFromTarget = nil

-- Check if conditions allow spamming parry
function AutoParry:IsSpam(params)
    local BallProperties = AutoParry.Ball.Properties
    if BallProperties.IsCurved then
        return false
    end
    local Target = AutoParry.Target.Current
    if not Target or not params then
        return false
    end
    -- Safety check for required fields
    if not params.Parries or not params.Speed or not params.EntityDistance then
        return false
    end
    if AutoParry.Target.From ~= LocalPlayer.Character then
        OldFromTarget = AutoParry.Target.From
    end
    if params.Parries < 3 and AutoParry.Target.From == OldFromTarget then
        return false
    end
    local playerPing = Player.Entity.Properties.Ping
    local distanceThreshold = 15 + (playerPing / 100)
    local reachTime = BallProperties.MaximumSpeed > 0 and BallProperties.Distance / BallProperties.MaximumSpeed - (playerPing / 1000) or 0
    if (tick() - params.LastHit) > 0.8 and params.EntityDistance > distanceThreshold and params.Parries < 3 then
        params.Parries = 1
        return false
    end
    if BallProperties.LerpRadians > 0.028 then
        if params.Parries > 3 then
            params.Parries = 1
        end
        return false
    end
    if (tick() - BallProperties.LastWarping) < (reachTime / 1.3) and params.EntityDistance > distanceThreshold and params.Parries < 3 then
        if params.Parries > 3 then
            params.Parries = 1
        end
        return false
    end
    if math.abs(params.Speed - params.OldSpeed) < 5.2 and params.EntityDistance > distanceThreshold and params.Speed < 60 and params.Parries < 3 then
        if params.Parries > 3 then
            params.Parries = 0
        end
        return false
    end
    if params.Speed < 10 then
        params.Parries = 1
        return false
    end
    if params.MaximumSpeed < params.Speed and params.EntityDistance > distanceThreshold then
        params.Parries = 1
        return false
    end
    if params.EntityDistance > params.Range and params.EntityDistance > distanceThreshold then
        if params.Parries > 2 then
            params.Parries = 1
        end
        return false
    end
    if params.BallDistance > params.Range and params.EntityDistance > distanceThreshold then
        if params.Parries > 2 then
            params.Parries = 1
        end
        return false
    end
    if params.LastPositionDistance > params.SpamAccuracy and params.EntityDistance > distanceThreshold then
        if params.Parries > 3 then
            params.Parries = 1
        end
        return false
    end
    if params.BallDistance > params.SpamAccuracy and params.BallDistance > distanceThreshold then
        if params.Parries > 3 then
            params.Parries = 1
        end
        return false
    end
    if params.EntityDistance > params.SpamAccuracy and params.EntityDistance > (distanceThreshold - math.pi) then
        if params.Parries > 3 then
            params.Parries = 1
        end
        return false
    end
    return true
end

-- Get the closest player to the cursor
function Player.GetClosestPlayerToCursor()
    local closestPlayer = nil
    local minimalDistance = math.huge
    local mousePos = UserInputService:GetMouseLocation()
    for _, player in Alive:GetChildren() do
        if player == LocalPlayer.Character or player.Parent ~= Alive or not player:FindFirstChild("PrimaryPart") then
            continue
        end
        local screenPos, onScreen = Camera:WorldToScreenPoint(player.PrimaryPart.Position)
        if onScreen then
            local distance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
            if distance < minimalDistance then
                minimalDistance = distance
                closestPlayer = player
            end
        end
    end
    return closestPlayer
end

-- Get the closest aim entity
function Player.GetAimEntity()
    local closestEntity = nil
    local minimalDotProduct = -math.huge
    local cameraDirection = Camera and Camera.CFrame.LookVector or Vector3.zero
    for _, player in Alive:GetChildren() do
        if not player or player.Name == LocalPlayer.Name or not player:FindFirstChild("HumanoidRootPart") then
            continue
        end
        local entityDirection = (player.HumanoidRootPart.Position - (Camera and Camera.CFrame.Position or Vector3.zero)).Unit
        local dotProduct = cameraDirection:Dot(entityDirection)
        if dotProduct > minimalDotProduct then
            minimalDotProduct = dotProduct
            closestEntity = player
        end
    end
    return closestEntity
end

-- Linear prediction for smooth transitions
function LinearPredict(current, target, speed)
    return current + (target - current) * speed
end

-- Handle hell hook events
ReplicatedStorage.Remotes.PlrHellHooked.OnClientEvent:Connect(function(hooker)
    if hooker.Name == LocalPlayer.Name then
        AutoParry.Ball.Properties.HellHookCompleted = true
        return
    end
    AutoParry.Ball.Properties.HellHookCompleted = false
end)

ReplicatedStorage.Remotes.PlrHellHookCompleted.OnClientEvent:Connect(function()
    AutoParry.Ball.Properties.HellHookCompleted = true
end)

-- Handle successful parry events
ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function(slash, root)
    task.spawn(function()
        if root.Parent and root.Parent ~= LocalPlayer.Character then
            if root.Parent.Parent ~= Alive then
                return
            end
            AutoParry.Ball.Properties.Cooldown = false
            AutoParry.Ball.Properties.LastHit = tick()
        end
    end)
    if AutoParry.Ball.Properties.AutoSpam then
        AutoParry.PerformParry()
    end
end)

-- Handle ball spawn
Workspace.Balls.ChildAdded:Connect(function()
    if IsBallRespawned then
        return
    end
    IsBallRespawned = true
    local BallProperties = AutoParry.Ball.Properties
    BallProperties.RespawnTime = tick()
    AutoParry.Ball.BallEntity = AutoParry.GetBall()
    AutoParry.Ball.ClientBallEntity = AutoParry.GetClientBall()
    if AutoParry.Ball.BallEntity then
        Connections['on_target_change'] = AutoParry.Ball.BallEntity:GetAttributeChangedSignal('target'):Connect(function()
            local target = AutoParry.Ball.BallEntity:GetAttribute('target')
            if target == LocalPlayer.Name then
                BallProperties.Cooldown = false
                return
            end
            BallProperties.Cooldown = false
            BallProperties.OldSpeed = BallProperties.Speed
            BallProperties.LastPosition = BallProperties.Position
            BallProperties.Parries += 1
            task.delay(0.25, function()
                if BallProperties.Parries > 0 then
                    BallProperties.Parries -= 1
                end
            end)
        end)
    end
end)

-- Handle ball removal
Workspace.Balls.ChildRemoved:Connect(function(child)
    if child ~= AutoParry.Ball.BallEntity then
        return
    end
    IsBallRespawned = false
    AutoParry.Ball.BallEntity = nil
    AutoParry.Ball.ClientBallEntity = nil
    if Connections['on_target_change'] then
        Connections['on_target_change']:Disconnect()
        Connections['on_target_change'] = nil
    end
    AutoParry.Reset()
end)

-- Simulate server position
RunService:BindToRenderStep('server_position_simulation', 1, function()
    local ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue()
    if not LocalPlayer.Character or not LocalPlayer.Character.PrimaryPart then
        return
    end
    local PrimaryPart = LocalPlayer.Character.PrimaryPart
    local oldPosition = PrimaryPart.Position
    task.delay(ping / 1000, function()
        Player.Entity.Properties.ServerPosition = oldPosition
    end)
end)

-- Update player properties
RunService.PreSimulation:Connect(function()
    NetworkClient:SetOutgoingKBPSLimit(math.huge)
    local character = LocalPlayer.Character
    if not character or not character.PrimaryPart then
        return
    end
    local PlayerProperties = Player.Entity.Properties
    PlayerProperties.Sword = character:GetAttribute('CurrentlyEquippedSword') or ""
    PlayerProperties.Ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue()
    PlayerProperties.Velocity = character.PrimaryPart.AssemblyLinearVelocity
    PlayerProperties.Speed = PlayerProperties.Velocity.Magnitude
    PlayerProperties.IsMoving = PlayerProperties.Speed > 30
end)

AutoParry.Ball.BallEntity = AutoParry.GetBall()
AutoParry.Ball.ClientBallEntity = AutoParry.GetClientBall()

-- Update ball and target properties
RunService.PreSimulation:Connect(function()
    local ball = AutoParry.Ball.BallEntity
    if not ball then
        return
    end
    local zoomies = ball:FindFirstChild('zoomies')
    local BallProperties = AutoParry.Ball.Properties
    BallProperties.Position = ball.Position
    BallProperties.Velocity = ball.AssemblyLinearVelocity
    if zoomies then
        BallProperties.Velocity = ball.zoomies.VectorVelocity
    end
    BallProperties.Distance = (Player.Entity.Properties.ServerPosition - BallProperties.Position).Magnitude
    BallProperties.Speed = BallProperties.Velocity.Magnitude
    BallProperties.Direction = BallProperties.Velocity.Magnitude > 0 and (Player.Entity.Properties.ServerPosition - BallProperties.Position).Unit or Vector3.zero
    BallProperties.Dot = BallProperties.Direction:Dot(BallProperties.Velocity.Magnitude > 0 and BallProperties.Velocity.Unit or Vector3.zero)
    BallProperties.Radians = math.rad(math.asin(BallProperties.Dot))
    BallProperties.LerpRadians = LinearPredict(BallProperties.LerpRadians, BallProperties.Radians, 0.8)
    if not (BallProperties.LerpRadians < 0) and not (BallProperties.LerpRadians > 0) then
        BallProperties.LerpRadians = 0.027
    end
    BallProperties.MaximumSpeed = math.max(BallProperties.Speed, BallProperties.MaximumSpeed)
    AutoParry.Target.Aim = (Settings.CursorTargeting and not UserInputService.TouchEnabled and Player.GetClosestPlayerToCursor()) or Player.GetAimEntity()
    if ball:GetAttribute('from') then
        AutoParry.Target.From = Alive:FindFirstChild(ball:GetAttribute('from'))
    end
    AutoParry.Target.Current = Alive:FindFirstChild(ball:GetAttribute('target'))
    if not AutoParry.Target.Current then
        return
    end
    BallProperties.Rotation = BallProperties.Position
    if AutoParry.Target.Current and AutoParry.Target.Current.Name == LocalPlayer.Name and AutoParry.Target.Aim and AutoParry.Target.Aim.PrimaryPart then
        BallProperties.Rotation = AutoParry.Target.Aim.PrimaryPart.Position
    end
    if AutoParry.Target.Current and AutoParry.Target.Current.PrimaryPart then
        local targetServerPosition = AutoParry.Target.Current.PrimaryPart.Position
        local targetVelocity = AutoParry.Target.Current.PrimaryPart.AssemblyLinearVelocity
        AutoParry.EntityProperties.ServerPosition = targetServerPosition
        AutoParry.EntityProperties.Velocity = targetVelocity
        AutoParry.EntityProperties.Distance = LocalPlayer:DistanceFromCharacter(targetServerPosition)
        AutoParry.EntityProperties.Direction = (Player.Entity.Properties.ServerPosition - targetServerPosition).Unit
        AutoParry.EntityProperties.Speed = targetVelocity.Magnitude
        AutoParry.EntityProperties.IsMoving = targetVelocity.Magnitude > 0.1
        AutoParry.EntityProperties.Dot = AutoParry.EntityProperties.IsMoving and math.max(AutoParry.EntityProperties.Direction:Dot(targetVelocity.Unit), 0) or 0
    end
    if AutoParry.Ball.Properties.AutoSpam then
        AutoParry.PerformParry()
    end
end)

-- Main Auto-Parry and Auto-Spam loop
Connections['auto_parry'] = RunService.PostSimulation:Connect(function()
    local autoParryEnabled = Settings.AutoParryEnabled
    if not autoParryEnabled then
        AutoParry.Reset()
        return
    end
    local Character = LocalPlayer.Character
    if not Character or Character.Parent == Dead or not Character:FindFirstChild("HumanoidRootPart") or not Character:FindFirstChild("Humanoid") or Character.Humanoid.Health <= 0 then
        AutoParry.Reset()
        return
    end
    if not AutoParry.Ball.BallEntity then
        AutoParry.Ball.BallEntity = AutoParry.GetBall()
        if not AutoParry.Ball.BallEntity then
            return
        end
    end
    local BallProperties = AutoParry.Ball.Properties
    BallProperties.IsCurved = AutoParry.IsCurved()
    local pingThreshold = math.clamp(Player.Entity.Properties.Ping / 10, 10, 20)
    local spamAccuracy = BallProperties.MaximumSpeed / 7.0 + pingThreshold
    local parryAccuracy = BallProperties.MaximumSpeed / 11.5 + pingThreshold
    BallProperties.SpamRange = pingThreshold + BallProperties.Speed / 2.2
    BallProperties.ParryRange = pingThreshold + BallProperties.Speed / math.pi
    if Player.Entity.Properties.Sword == 'Titan Blade' then
        BallProperties.ParryRange += 11
        BallProperties.SpamRange += 2
    end
    local distanceToLastPosition = LocalPlayer:DistanceFromCharacter(BallProperties.LastPosition) or 0
    if AutoParry.Target.Current then
        BallProperties.AutoSpam = AutoParry:IsSpam({
            Speed = BallProperties.Speed,
            SpamAccuracy = spamAccuracy,
            Parries = BallProperties.Parries,
            BallSpeed = BallProperties.Speed,
            Range = BallProperties.SpamRange / (3.15 - pingThreshold / 10),
            LastHit = BallProperties.LastHit,
            BallDistance = BallProperties.Distance,
            MaximumSpeed = BallProperties.MaximumSpeed,
            OldSpeed = BallProperties.OldSpeed,
            EntityDistance = AutoParry.EntityProperties.Distance,
            LastPositionDistance = distanceToLastPosition,
        })
    end
    if BallProperties.AutoSpam then
        return
    end
    if AutoParry.Target.Current and AutoParry.Target.Current.Name == LocalPlayer.Name then
        BallProperties.AutoSpam = AutoParry:IsSpam({
            Speed = BallProperties.Speed,
            SpamAccuracy = spamAccuracy,
            Parries = BallProperties.Parries,
            BallSpeed = BallProperties.Speed,
            Range = BallProperties.SpamRange,
            LastHit = BallProperties.LastHit,
            BallDistance = BallProperties.Distance,
            MaximumSpeed = BallProperties.MaximumSpeed,
            OldSpeed = BallProperties.OldSpeed,
            EntityDistance = AutoParry.EntityProperties.Distance,
            LastPositionDistance = distanceToLastPosition,
        })
    end
    if BallProperties.AutoSpam then
        return
    end
    if BallProperties.Distance > BallProperties.ParryRange and BallProperties.Distance > parryAccuracy then
        return
    end
    if AutoParry.Target.Current and AutoParry.Target.Current ~= LocalPlayer.Character then
        return
    end
    
        AutoParry.PerformParry()
    
    task.spawn(function()
        repeat
            RunService.PreSimulation:Wait(0)
        until (tick() - BallProperties.LastHit) > 0.8 - (pingThreshold / 150)
        BallProperties.Cooldown = false
    end)
end)

-- GUI setup
local Windows = NothingLibrary.new({
    Title = "VicoX - Blade Ball",
    Description = "Ultimate Auto-Parry, Auto-Spam, and Effects",
    Keybind = Enum.KeyCode.LeftControl,
    Logo = "rbxassetid://18898582662"
})

local TabFrame = Windows:NewTab({
    Title = "Main",
    Description = "...",
    Icon = "rbxassetid://7733960981"
})

local AutoSection = TabFrame:NewSection({
    Title = "Parry Settings",
    Icon = "rbxassetid://7743869054",
    Position = "Left"
})

AutoSection:NewToggle({
    Title = "Auto-Parry",
    Default = true,
    Callback = function(state)
        Settings.AutoParryEnabled = state
    end
})

AutoSection:NewToggle({
    Title = "Cursor Targeting",
    Default = true,
    Callback = function(state)
        Settings.CursorTargeting = state
    end
})

AutoSection:NewDropdown({
    Title = "Direction/Curve Method",
    Data = {"Random", "Backwards", "Straight", "Up", "Right", "Left"},
    Default = "Straight",
    Callback = function(value)
        AutoParry.ParryType = value
    end
})

Notify.new({
    Title = "VicoX Loaded",
    Description = "?!",
    Duration = 5,
    Icon = "rbxassetid://8997385628"
})
